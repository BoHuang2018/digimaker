// Package models contains the types for schema 'dev_emf'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// DmLocation represents a row from 'dev_emf.dm_location'.
type DmLocation struct {
	ID int `json:"id"` // id
	ParentID sql.NullInt64 `json:"parent_id"` // parent_id
	ContentType sql.NullString `json:"content_type"` // content_type
	ContentID sql.NullInt64 `json:"content_id"` // content_id
	Name sql.NullString `json:"name"` // name
	Section sql.NullString `json:"section"` // section
	RemoteID sql.NullString `json:"remote_id"` // remote_id

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the DmLocation exists in the database.
func (dl *DmLocation) Exists() bool {
	return dl._exists
}

// Deleted provides information if the DmLocation has been deleted from the database.
func (dl *DmLocation) Deleted() bool {
	return dl._deleted
}

// Insert inserts the DmLocation to the database.
func (dl *DmLocation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dl._exists {
		return errors.New("insert failed: already exists")
	}



	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_emf.dm_location (` +
		`parent_id, content_type, content_id, name, section, remote_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dl.ParentID, dl.ContentType, dl.ContentID, dl.Name, dl.Section, dl.RemoteID)
	res, err := db.Exec(sqlstr, dl.ParentID, dl.ContentType, dl.ContentID, dl.Name, dl.Section, dl.RemoteID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dl.ID = int(id)
	dl._exists = true


	return nil
}


	// Update updates the DmLocation in the database.
	func (dl *DmLocation) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !dl._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if dl._deleted {
			return errors.New("update failed: marked for deletion")
		}

		
			// sql query
			const sqlstr = `UPDATE dev_emf.dm_location SET ` +
				`parent_id = ?, content_type = ?, content_id = ?, name = ?, section = ?, remote_id = ?` +
				` WHERE id = ?`

			// run query
			XOLog(sqlstr, dl.ParentID, dl.ContentType, dl.ContentID, dl.Name, dl.Section, dl.RemoteID, dl.ID)
			_, err = db.Exec(sqlstr, dl.ParentID, dl.ContentType, dl.ContentID, dl.Name, dl.Section, dl.RemoteID, dl.ID)
			return err
	}

	// Save saves the DmLocation to the database.
	func (dl *DmLocation) Save(db XODB) error {
		if dl.Exists() {
			return dl.Update(db)
		}

		return dl.Insert(db)
	}


// Delete deletes the DmLocation from the database.
func (dl *DmLocation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dl._exists {
		return nil
	}

	// if deleted, bail
	if dl._deleted {
		return nil
	}

	
		// sql query
		const sqlstr = `DELETE FROM dev_emf.dm_location WHERE id = ?`

		// run query
		XOLog(sqlstr, dl.ID)
		_, err = db.Exec(sqlstr, dl.ID)
		if err != nil {
			return err
		}

	// set deleted
	dl._deleted = true

	return nil
}

// DmLocationByID retrieves a row from 'dev_emf.dm_location' as a DmLocation.
//
// Generated from index 'dm_location_id_pkey'.
func DmLocationByID(db XODB, id int) (*DmLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, content_type, content_id, name, section, remote_id ` +
		`FROM dev_emf.dm_location ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	dl := DmLocation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dl.ID, &dl.ParentID, &dl.ContentType, &dl.ContentID, &dl.Name, &dl.Section, &dl.RemoteID)
	if err != nil {
		return nil, err
	}

	return &dl, nil
}

