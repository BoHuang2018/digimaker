// Package models contains the types for schema 'dev_emf'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// DmVersion represents a row from 'dev_emf.dm_version'.
type DmVersion struct {
	ID int `json:"id"` // id
	Type sql.NullString `json:"type"` // type
	ContentID sql.NullInt64 `json:"content_id"` // content_id
	Version sql.NullInt64 `json:"version"` // version
	Data sql.NullString `json:"data"` // data

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the DmVersion exists in the database.
func (dv *DmVersion) Exists() bool {
	return dv._exists
}

// Deleted provides information if the DmVersion has been deleted from the database.
func (dv *DmVersion) Deleted() bool {
	return dv._deleted
}

// Insert inserts the DmVersion to the database.
func (dv *DmVersion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dv._exists {
		return errors.New("insert failed: already exists")
	}



	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_emf.dm_version (` +
		`type, content_id, version, data` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dv.Type, dv.ContentID, dv.Version, dv.Data)
	res, err := db.Exec(sqlstr, dv.Type, dv.ContentID, dv.Version, dv.Data)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dv.ID = int(id)
	dv._exists = true


	return nil
}


	// Update updates the DmVersion in the database.
	func (dv *DmVersion) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !dv._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if dv._deleted {
			return errors.New("update failed: marked for deletion")
		}

		
			// sql query
			const sqlstr = `UPDATE dev_emf.dm_version SET ` +
				`type = ?, content_id = ?, version = ?, data = ?` +
				` WHERE id = ?`

			// run query
			XOLog(sqlstr, dv.Type, dv.ContentID, dv.Version, dv.Data, dv.ID)
			_, err = db.Exec(sqlstr, dv.Type, dv.ContentID, dv.Version, dv.Data, dv.ID)
			return err
	}

	// Save saves the DmVersion to the database.
	func (dv *DmVersion) Save(db XODB) error {
		if dv.Exists() {
			return dv.Update(db)
		}

		return dv.Insert(db)
	}


// Delete deletes the DmVersion from the database.
func (dv *DmVersion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dv._exists {
		return nil
	}

	// if deleted, bail
	if dv._deleted {
		return nil
	}

	
		// sql query
		const sqlstr = `DELETE FROM dev_emf.dm_version WHERE id = ?`

		// run query
		XOLog(sqlstr, dv.ID)
		_, err = db.Exec(sqlstr, dv.ID)
		if err != nil {
			return err
		}

	// set deleted
	dv._deleted = true

	return nil
}

// DmVersionByID retrieves a row from 'dev_emf.dm_version' as a DmVersion.
//
// Generated from index 'dm_version_id_pkey'.
func DmVersionByID(db XODB, id int) (*DmVersion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, content_id, version, data ` +
		`FROM dev_emf.dm_version ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	dv := DmVersion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dv.ID, &dv.Type, &dv.ContentID, &dv.Version, &dv.Data)
	if err != nil {
		return nil, err
	}

	return &dv, nil
}

