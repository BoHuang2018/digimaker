// Package models contains the types for schema 'dev_emf'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// DmUser represents a row from 'dev_emf.dm_user'.
type DmUser struct {
	ID int `json:"id"` // id
	Login sql.NullString `json:"login"` // login
	Firstname sql.NullString `json:"firstname"` // firstname
	Lastname sql.NullString `json:"lastname"` // lastname
	Password sql.NullString `json:"password"` // password
	Mobile sql.NullString `json:"mobile"` // mobile
	RemoteID sql.NullString `json:"remote_id"` // remote_id

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the DmUser exists in the database.
func (du *DmUser) Exists() bool {
	return du._exists
}

// Deleted provides information if the DmUser has been deleted from the database.
func (du *DmUser) Deleted() bool {
	return du._deleted
}

// Insert inserts the DmUser to the database.
func (du *DmUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if du._exists {
		return errors.New("insert failed: already exists")
	}



	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_emf.dm_user (` +
		`login, firstname, lastname, password, mobile, remote_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, du.Login, du.Firstname, du.Lastname, du.Password, du.Mobile, du.RemoteID)
	res, err := db.Exec(sqlstr, du.Login, du.Firstname, du.Lastname, du.Password, du.Mobile, du.RemoteID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	du.ID = int(id)
	du._exists = true


	return nil
}


	// Update updates the DmUser in the database.
	func (du *DmUser) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !du._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if du._deleted {
			return errors.New("update failed: marked for deletion")
		}

		
			// sql query
			const sqlstr = `UPDATE dev_emf.dm_user SET ` +
				`login = ?, firstname = ?, lastname = ?, password = ?, mobile = ?, remote_id = ?` +
				` WHERE id = ?`

			// run query
			XOLog(sqlstr, du.Login, du.Firstname, du.Lastname, du.Password, du.Mobile, du.RemoteID, du.ID)
			_, err = db.Exec(sqlstr, du.Login, du.Firstname, du.Lastname, du.Password, du.Mobile, du.RemoteID, du.ID)
			return err
	}

	// Save saves the DmUser to the database.
	func (du *DmUser) Save(db XODB) error {
		if du.Exists() {
			return du.Update(db)
		}

		return du.Insert(db)
	}


// Delete deletes the DmUser from the database.
func (du *DmUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !du._exists {
		return nil
	}

	// if deleted, bail
	if du._deleted {
		return nil
	}

	
		// sql query
		const sqlstr = `DELETE FROM dev_emf.dm_user WHERE id = ?`

		// run query
		XOLog(sqlstr, du.ID)
		_, err = db.Exec(sqlstr, du.ID)
		if err != nil {
			return err
		}

	// set deleted
	du._deleted = true

	return nil
}

// DmUserByID retrieves a row from 'dev_emf.dm_user' as a DmUser.
//
// Generated from index 'dm_user_id_pkey'.
func DmUserByID(db XODB, id int) (*DmUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, login, firstname, lastname, password, mobile, remote_id ` +
		`FROM dev_emf.dm_user ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	du := DmUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&du.ID, &du.Login, &du.Firstname, &du.Lastname, &du.Password, &du.Mobile, &du.RemoteID)
	if err != nil {
		return nil, err
	}

	return &du, nil
}

