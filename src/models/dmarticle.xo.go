// Package models contains the types for schema 'dev_emf'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// DmArticle represents a row from 'dev_emf.dm_article'.
type DmArticle struct {
	ID int `json:"id"` // id
	Title sql.NullString `json:"title"` // title
	Body sql.NullString `json:"body"` // body
	Published sql.NullInt64 `json:"published"` // published
	Modified sql.NullInt64 `json:"modified"` // modified

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the DmArticle exists in the database.
func (da *DmArticle) Exists() bool {
	return da._exists
}

// Deleted provides information if the DmArticle has been deleted from the database.
func (da *DmArticle) Deleted() bool {
	return da._deleted
}

// Insert inserts the DmArticle to the database.
func (da *DmArticle) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if da._exists {
		return errors.New("insert failed: already exists")
	}



	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_emf.dm_article (` +
		`title, body, published, modified` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, da.Title, da.Body, da.Published, da.Modified)
	res, err := db.Exec(sqlstr, da.Title, da.Body, da.Published, da.Modified)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	da.ID = int(id)
	da._exists = true


	return nil
}


	// Update updates the DmArticle in the database.
	func (da *DmArticle) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !da._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if da._deleted {
			return errors.New("update failed: marked for deletion")
		}

		
			// sql query
			const sqlstr = `UPDATE dev_emf.dm_article SET ` +
				`title = ?, body = ?, published = ?, modified = ?` +
				` WHERE id = ?`

			// run query
			XOLog(sqlstr, da.Title, da.Body, da.Published, da.Modified, da.ID)
			_, err = db.Exec(sqlstr, da.Title, da.Body, da.Published, da.Modified, da.ID)
			return err
	}

	// Save saves the DmArticle to the database.
	func (da *DmArticle) Save(db XODB) error {
		if da.Exists() {
			return da.Update(db)
		}

		return da.Insert(db)
	}


// Delete deletes the DmArticle from the database.
func (da *DmArticle) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !da._exists {
		return nil
	}

	// if deleted, bail
	if da._deleted {
		return nil
	}

	
		// sql query
		const sqlstr = `DELETE FROM dev_emf.dm_article WHERE id = ?`

		// run query
		XOLog(sqlstr, da.ID)
		_, err = db.Exec(sqlstr, da.ID)
		if err != nil {
			return err
		}

	// set deleted
	da._deleted = true

	return nil
}

// DmArticleByID retrieves a row from 'dev_emf.dm_article' as a DmArticle.
//
// Generated from index 'dm_article_id_pkey'.
func DmArticleByID(db XODB, id int) (*DmArticle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, body, published, modified ` +
		`FROM dev_emf.dm_article ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	da := DmArticle{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&da.ID, &da.Title, &da.Body, &da.Published, &da.Modified)
	if err != nil {
		return nil, err
	}

	return &da, nil
}

