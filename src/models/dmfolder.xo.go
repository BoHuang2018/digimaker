// Package models contains the types for schema 'dev_emf'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// DmFolder represents a row from 'dev_emf.dm_folder'.
type DmFolder struct {
	ID int `json:"id"` // id
	Title sql.NullString `json:"title"` // title
	Summary sql.NullString `json:"summary"` // summary
	Published sql.NullInt64 `json:"published"` // published
	Modified sql.NullInt64 `json:"modified"` // modified
	RemoteID sql.NullString `json:"remote_id"` // remote_id

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the DmFolder exists in the database.
func (df *DmFolder) Exists() bool {
	return df._exists
}

// Deleted provides information if the DmFolder has been deleted from the database.
func (df *DmFolder) Deleted() bool {
	return df._deleted
}

// Insert inserts the DmFolder to the database.
func (df *DmFolder) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if df._exists {
		return errors.New("insert failed: already exists")
	}



	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_emf.dm_folder (` +
		`title, summary, published, modified, remote_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, df.Title, df.Summary, df.Published, df.Modified, df.RemoteID)
	res, err := db.Exec(sqlstr, df.Title, df.Summary, df.Published, df.Modified, df.RemoteID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	df.ID = int(id)
	df._exists = true


	return nil
}


	// Update updates the DmFolder in the database.
	func (df *DmFolder) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !df._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if df._deleted {
			return errors.New("update failed: marked for deletion")
		}

		
			// sql query
			const sqlstr = `UPDATE dev_emf.dm_folder SET ` +
				`title = ?, summary = ?, published = ?, modified = ?, remote_id = ?` +
				` WHERE id = ?`

			// run query
			XOLog(sqlstr, df.Title, df.Summary, df.Published, df.Modified, df.RemoteID, df.ID)
			_, err = db.Exec(sqlstr, df.Title, df.Summary, df.Published, df.Modified, df.RemoteID, df.ID)
			return err
	}

	// Save saves the DmFolder to the database.
	func (df *DmFolder) Save(db XODB) error {
		if df.Exists() {
			return df.Update(db)
		}

		return df.Insert(db)
	}


// Delete deletes the DmFolder from the database.
func (df *DmFolder) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !df._exists {
		return nil
	}

	// if deleted, bail
	if df._deleted {
		return nil
	}

	
		// sql query
		const sqlstr = `DELETE FROM dev_emf.dm_folder WHERE id = ?`

		// run query
		XOLog(sqlstr, df.ID)
		_, err = db.Exec(sqlstr, df.ID)
		if err != nil {
			return err
		}

	// set deleted
	df._deleted = true

	return nil
}

// DmFolderByID retrieves a row from 'dev_emf.dm_folder' as a DmFolder.
//
// Generated from index 'dm_folder_id_pkey'.
func DmFolderByID(db XODB, id int) (*DmFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, summary, published, modified, remote_id ` +
		`FROM dev_emf.dm_folder ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	df := DmFolder{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&df.ID, &df.Title, &df.Summary, &df.Published, &df.Modified, &df.RemoteID)
	if err != nil {
		return nil, err
	}

	return &df, nil
}

